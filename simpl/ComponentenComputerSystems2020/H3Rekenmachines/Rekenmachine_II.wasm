# Authors: Wouter Koolen-Wijkstra & Ben Bruidegom V aug 2013
# Rekenmachine_II WASM instruction set definition

.processor REKENMACHINE_II
.setting targetMemory = "Rekenmachine_II.Instruction Memory_II:Memory"
.autocast {
	number -> address
	number -> label
}
.constant {
  $0  = 0x0/register
  $1  = 0x1/register
  $2  = 0x2/register
  $3  = 0x3/register
  $4  = 0x4/register
  $5  = 0x5/register
  $6  = 0x6/register
  $7  = 0x7/register
  $8  = 0x8/register
  $9  = 0x9/register
  $10 = 0xA/register
  $11 = 0xB/register
  $12 = 0xC/register
  $13 = 0xD/register
  $14 = 0xE/register
  $15 = 0xF/register
}


.highlight {
	# hack to highlight the first instruction on the START of the first
	# cycle already. We normally highlight instructions on the END of their
	# cycle. This one is roze
	[ "Rekenmachine_II.Instruction Memory_II" | "0xFFFF-(Address==0xFFFF)*Address" | "#c8c8ff"]
	# and this one is turquoise
	[ "Rekenmachine_II.Instruction Memory_II" | "Address" | "#bbE0E0"]
}



.opcodepartition {
  DEFAULT = [OP:0d1, ALU:0d3, RS:0d4, RT:0d4, RD: 0d4, IMM:0d16]
}


.instructionformat   ARITH1 = [DEFAULT | rd:0d4/register, rt:0d4/register]
.instructiondefinition COPY =	[ARITH1  | " OP = 0b1; ALU = 0b111; RS = 0; RT = rt; RD = rd; IMM = 0;"]

.instructionformat   ARITH2 = [DEFAULT | rd:0d4/register, rs:0d4/register, rt:0d4/register]
.instructiondefinition ADD =	[ARITH2  | " OP = 0b1; ALU = 0b000; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition SUB =	[ARITH2  | " OP = 0b1; ALU = 0b001; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition AND= 	[ARITH2  | " OP = 0b1; ALU = 0b010; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition OR =	[ARITH2  | " OP = 0b1; ALU = 0b011; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition XOR =	[ARITH2  | " OP = 0b1; ALU = 0b100; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition SHL= 	[ARITH2  | " OP = 0b1; ALU = 0b101; RS = rs; RT = rt; RD = rd; IMM = 0;"]
.instructiondefinition SHR= 	[ARITH2  | " OP = 0b1; ALU = 0b110; RS = rs; RT = rt; RD = rd; IMM = 0;"]

.instructionformat   ARITHI1 = [DEFAULT | rd:0d4/register, imm:0d16/number]
.instructiondefinition LOADI = [ARITHI1 |	" OP = 0b0; ALU = 0b111; RS = 0; RT = 0; RD = rd; IMM = imm;"]

.instructionformat   ARITHI2 = [DEFAULT | rd:0d4/register, rs:0d4/register, imm:0d16/number]
.instructiondefinition ADDI =	[ARITHI2| " OP = 0b0; ALU = 0b000; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition SUBI =	[ARITHI2| " OP = 0b0; ALU = 0b001; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition ANDI =	[ARITHI2| " OP = 0b0; ALU = 0b010; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition ORI =	[ARITHI2 | " OP = 0b0; ALU = 0b011; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition XORI = [ARITHI2 | " OP = 0b0; ALU = 0b100; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition SHLI= 	[ARITHI2 | " OP = 0b0; ALU = 0b101; RS = rs; RT = 0; RD = rd; IMM = imm;"]
.instructiondefinition SHRI= 	[ARITHI2 | " OP = 0b0; ALU = 0b110; RS = rs; RT = 0; RD = rd; IMM = imm;"]

# end of .processor definition


.memory REGISTERS
.setting {
  targetMemory = "Rekenmachine_II.Registers:Registers"
  addressType  = "register"
}


